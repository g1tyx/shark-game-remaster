/* ascii85.js */
function shorten(array,number){for(;0<number--;)array.pop()}function assertOrBadInput(expression,message){if(!expression)throw new ascii85.Ascii85CodecError(message)}window.ascii85=new class{Ascii85CodecError=class extends Error{constructor(message){super(message)}toString(){return"Ascii85CodecError"+(this.message?": "+this.message:"")}};encode(bytes){assertOrBadInput(!/[^\x00-\xFF]/.test(bytes),"Input contains out-of-range characters.");var padding="\0\0\0\0".slice(bytes.length%4||4);const out_array=[];for(let i=0,n=(bytes+=padding).length;i<n;i+=4){var char5,char4,char3,char2,newchars=(bytes.charCodeAt(i)<<24)+(bytes.charCodeAt(i+1)<<16)+(bytes.charCodeAt(i+2)<<8)+bytes.charCodeAt(i+3)>>>0;0==newchars?out_array.push(122):(char4=(newchars=(newchars-(char5=newchars%85))/85)%85,char3=(newchars=(newchars-char4)/85)%85,char2=(newchars=(newchars-char3)/85)%85,newchars=(newchars-char2)/85%85,out_array.push(33+newchars,33+char2,33+char3,33+char4,33+char5))}return shorten(out_array,padding.length),"<~"+String.fromCharCode.apply(String,out_array)+"~>"}decode(a85text){assertOrBadInput("<~"===a85text.slice(0,2)&&"~>"===a85text.slice(-2),"Invalid initial/final ascii85 characters"),a85text=a85text.slice(2,-2).replace(/\s/g,"").replace("z","!!!!!"),assertOrBadInput(!/[^\x21-\x75]/.test(a85text),"Input contains out-of-range characters.");var newchars,padding="uuuuu".slice(a85text.length%5||5);const out_array=[];for(let i=0,n=(a85text+=padding).length;i<n;i+=5)newchars=52200625*(a85text.charCodeAt(i)-33)+614125*(a85text.charCodeAt(i+1)-33)+7225*(a85text.charCodeAt(i+2)-33)+85*(a85text.charCodeAt(i+3)-33)+(a85text.charCodeAt(i+4)-33),out_array.push(newchars>>24&255,newchars>>16&255,newchars>>8&255,255&newchars);return shorten(out_array,padding.length),String.fromCharCode.apply(String,out_array)}};
//# sourceMappingURL=ascii85.min.js.map